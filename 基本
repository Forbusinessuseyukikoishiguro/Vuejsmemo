# 【超初心者向け】Vue.jsライフサイクル基礎解説 - 全体の流れと文法

## 1. そもそもコンポーネントって何？

### Vue.jsコンポーネントとは
**コンポーネント**は、HTMLとJavaScriptを組み合わせた「部品」のようなものです。

```
普通のHTML:
<div>
  <h1>こんにちは</h1>
  <button onclick="変更する()">ボタン</button>
</div>

↓

Vue.jsコンポーネント:
一つのファイル(.vue)に以下が全部入る
- HTML部分（template）
- JavaScript部分（script）
- CSS部分（style）
```

## 2. ライフサイクルって何？なぜ必要？

### 人間で例えると...

```
人間の一生:
赤ちゃん → 子供 → 大人 → 老人 → 死亡
  ↓       ↓     ↓     ↓      ↓
離乳食    勉強   仕事   退職   片付け

Vue.jsコンポーネントの一生:
作成準備 → 作成 → 表示 → 更新 → 削除
  ↓       ↓     ↓     ↓      ↓
準備     初期化  画面   変更   片付け
```

### なぜこの順番が大切？

```javascript
// ❌ 間違った順番の例
// まだ赤ちゃんなのに仕事をさせようとする
beforeCreate() {
  this.message = "こんにちは" // エラー！まだmessageは存在しない
}

// ✅ 正しい順番の例  
// 大人になってから仕事をする
created() {
  this.message = "こんにちは" // OK！messageが使える状態
}
```

## 3. Vue.jsの基本文法おさらい

### .vueファイルの構造

```vue
<!-- 1. template: HTML部分（見た目） -->
<template>
  <div>
    <!-- {{ }} で変数を表示 -->
    <h1>{{ title }}</h1>
    
    <!-- @click でクリックイベント -->
    <button @click="clickButton">ボタン</button>
  </div>
</template>

<!-- 2. script: JavaScript部分（動作） -->
<script>
export default {
  // コンポーネントの名前
  name: 'MyComponent',
  
  // データ（変数のようなもの）
  data() {
    return {
      title: 'Hello Vue!'  // この変数がtemplateで使える
    }
  },
  
  // メソッド（関数のようなもの）
  methods: {
    clickButton() {
      // ボタンがクリックされた時の処理
      this.title = 'クリックされた！'
    }
  }
}
</script>

<!-- 3. style: CSS部分（デザイン） -->
<style>
h1 {
  color: blue;
}
</style>
```

## 4. ライフサイクルの全体の流れ（実際の例で）

### ステップ1: ページを開いた瞬間

```vue
<template>
  <div>
    <h1>{{ message }}</h1>
    <p>カウント: {{ count }}</p>
    <button @click="increment">+1</button>
  </div>
</template>

<script>
export default {
  name: 'CounterComponent',
  
  data() {
    return {
      message: 'カウンターアプリ',
      count: 0
    }
  }
}
</script>
```

#### 実際にブラウザで何が起こるか：

```
1. ユーザーがページを開く
   ↓
2. beforeCreate が実行される
   「準備中... まだ何もできない」
   ↓
3. created が実行される  
   「data が使えるようになった！ message: 'カウンターアプリ', count: 0」
   ↓
4. beforeMount が実行される
   「画面に表示する準備中...」
   ↓
5. mounted が実行される
   「画面に表示完了！ユーザーが見れる状態」
```

### ステップ2: ユーザーがボタンをクリック

```javascript
methods: {
  increment() {
    // ここでcountが変更される
    this.count = this.count + 1  // 0 → 1 に変更
  }
}
```

#### 実際にブラウザで何が起こるか：

```
1. ユーザーがボタンをクリック
   ↓
2. increment メソッドが実行される
   「count を 0 から 1 に変更」
   ↓
3. beforeUpdate が実行される
   「データは変わったけど、まだ画面は古いまま」
   画面: 「カウント: 0」（まだ古い値）
   データ: count = 1（新しい値）
   ↓
4. updated が実行される
   「画面も新しい値に更新完了！」
   画面: 「カウント: 1」（新しい値）
```

### ステップ3: ページを閉じる・別ページに移動

```
1. ユーザーがページを閉じる or 別ページに移動
   ↓
2. beforeUnmount が実行される
   「片付け開始... まだコンポーネントは生きてる」
   ↓
3. unmounted が実行される
   「片付け完了。コンポーネント削除済み」
```

## 5. 各ライフサイクルで何ができる？何ができない？

### 一覧表

| ライフサイクル | data使える？ | DOM使える？ | 主な用途 |
|-------------|------------|------------|---------|
| **beforeCreate** | ❌ | ❌ | 何もできない（ログ出力程度） |
| **created** | ✅ | ❌ | データ取得、初期設定 |
| **beforeMount** | ✅ | ❌ | マウント前の最終準備 |
| **mounted** | ✅ | ✅ | DOM操作、外部ライブラリ |
| **beforeUpdate** | ✅ | ✅ | 更新前の処理 |
| **updated** | ✅ | ✅ | 更新後の処理 |
| **beforeUnmount** | ✅ | ✅ | 片付け処理 |
| **unmounted** | ❌ | ❌ | 最終片付け |

### 具体例で理解

```vue
<script>
export default {
  data() {
    return {
      message: 'Hello',
      users: []
    }
  },
  
  // 1. 何もできない段階
  beforeCreate() {
    console.log('beforeCreate')
    console.log(this.message)  // undefined（使えない）
    
    // ❌ こんなことはできない
    // this.message = '変更'  // エラー！
  },
  
  // 2. データが使える段階
  created() {
    console.log('created')
    console.log(this.message)  // 'Hello'（使える！）
    
    // ✅ こんなことができる
    this.message = '変更後'     // OK！
    this.fetchUsers()          // API呼び出しOK！
    
    // ❌ でもこれはまだできない
    // document.getElementById('myButton')  // null（DOMなし）
  },
  
  // 3. DOM準備中
  beforeMount() {
    console.log('beforeMount')
    // まだDOMにアクセスできない
  },
  
  // 4. DOM完成！
  mounted() {
    console.log('mounted')
    
    // ✅ 今度はDOMにアクセスできる
    const button = document.getElementById('myButton')  // 見つかる！
    button.focus()  // フォーカス設定OK
    
    // 外部ライブラリの初期化などもここで
  },
  
  methods: {
    async fetchUsers() {
      // API からユーザー一覧を取得
      this.users = await fetch('/api/users')
    }
  }
}
</script>
```

## 6. 実際の動作を見てみよう（デバッグ版）

### 動作確認用コンポーネント

```vue
<template>
  <div>
    <h1>{{ title }}</h1>
    <p>現在の数: {{ number }}</p>
    <button @click="changeNumber">数を変更</button>
    <button @click="destroyComponent">コンポーネント削除</button>
  </div>
</template>

<script>
export default {
  name: 'DebugComponent',
  
  data() {
    return {
      title: 'ライフサイクル確認',
      number: 1
    }
  },
  
  // === ライフサイクルフック（実行される順番） ===
  
  beforeCreate() {
    console.log('🔴 1. beforeCreate')
    console.log('   この時点でのtitle:', this.title)  // undefined
    console.log('   データはまだ使えません')
  },
  
  created() {
    console.log('🟡 2. created')
    console.log('   この時点でのtitle:', this.title)  // 'ライフサイクル確認'
    console.log('   データが使えるようになりました！')
    
    // ここでAPIからデータを取得することが多い
    console.log('   → APIからデータ取得中...')
  },
  
  beforeMount() {
    console.log('🟠 3. beforeMount')
    console.log('   DOMを作成する直前です')
    console.log('   画面にはまだ何も表示されていません')
  },
  
  mounted() {
    console.log('🟢 4. mounted')
    console.log('   画面に表示されました！')
    console.log('   DOMにアクセスできます:', this.$el)
    
    // DOM操作ができるようになった
    console.log('   → DOM操作やライブラリ初期化をここで行います')
  },
  
  beforeUpdate() {
    console.log('🔵 5. beforeUpdate')
    console.log('   データが変更されました（画面はまだ古いまま）')
    console.log('   新しいnumber:', this.number)
  },
  
  updated() {
    console.log('🟣 6. updated')
    console.log('   画面も更新されました！')
    console.log('   表示されているnumber:', this.number)
  },
  
  beforeUnmount() {
    console.log('🟤 7. beforeUnmount')
    console.log('   コンポーネントを削除する直前です')
    console.log('   クリーンアップ処理をここで行います')
    
    // タイマーの削除、イベントリスナーの削除など
  },
  
  unmounted() {
    console.log('⚫ 8. unmounted')
    console.log('   コンポーネントが削除されました')
    console.log('   さようなら...')
  },
  
  methods: {
    changeNumber() {
      // この処理により beforeUpdate → updated が実行される
      this.number = this.number + 1
    },
    
    destroyComponent() {
      // 親コンポーネントにこのコンポーネントを削除するよう伝える
      this.$emit('destroy')
    }
  }
}
</script>
```

### ブラウザのコンソールで確認できる順番：

```
ページを開いた時:
🔴 1. beforeCreate
   この時点でのtitle: undefined
   データはまだ使えません

🟡 2. created  
   この時点でのtitle: ライフサイクル確認
   データが使えるようになりました！
   → APIからデータ取得中...

🟠 3. beforeMount
   DOMを作成する直前です
   画面にはまだ何も表示されていません

🟢 4. mounted
   画面に表示されました！
   DOMにアクセスできます: <div>...</div>
   → DOM操作やライブラリ初期化をここで行います

--- ここで画面がユーザーに見える状態 ---

「数を変更」ボタンをクリックした時:
🔵 5. beforeUpdate
   データが変更されました（画面はまだ古いまま）
   新しいnumber: 2

🟣 6. updated
   画面も更新されました！
   表示されているnumber: 2

「コンポーネント削除」ボタンをクリックした時:
🟤 7. beforeUnmount
   コンポーネントを削除する直前です
   クリーンアップ処理をここで行います

⚫ 8. unmounted
   コンポーネントが削除されました
   さようなら...
```

## 7. よくある質問と答え

### Q1: どのライフサイクルでAPIを呼ぶべき？

```javascript
// ✅ 推奨：created で呼ぶ
created() {
  // DOMは不要で、データだけ取得したい場合
  this.fetchUserData()
}

// ✅ これもOK：mounted で呼ぶ
mounted() {
  // DOM操作も必要な場合
  this.fetchUserData()
  this.initializeChart()  // グラフライブラリなど
}

// ❌ ダメ：beforeCreate で呼ぶ
beforeCreate() {
  this.fetchUserData()  // this.fetchUserData は undefined
}
```

### Q2: なぜクリーンアップが必要？

```javascript
// ❌ 悪い例：クリーンアップしない
mounted() {
  // タイマーを開始
  this.timer = setInterval(() => {
    console.log('動作中...')
  }, 1000)
}
// コンポーネントが削除されてもタイマーが動き続ける
// → メモリリーク（メモリ使用量が増え続ける）

// ✅ 良い例：クリーンアップする
mounted() {
  this.timer = setInterval(() => {
    console.log('動作中...')
  }, 1000)
},

beforeUnmount() {
  // タイマーを停止
  if (this.timer) {
    clearInterval(this.timer)
  }
}
// コンポーネント削除時にタイマーも停止
// → メモリリークなし
```

### Q3: updated は使わない方がいい？

```javascript
// ❌ 悪い例：updated で重い処理
updated() {
  // データが変更されるたびに実行される
  this.heavyCalculation()  // 重い処理
  this.apiCall()          // API呼び出し
}

// ✅ 良い例：watch を使う
watch: {
  // 特定のデータが変更された時のみ実行
  userData(newData, oldData) {
    if (newData.id !== oldData.id) {
      this.apiCall()
    }
  }
}
```

## まとめ

### Vue.jsライフサイクルの流れ

1. **beforeCreate**: 何もできない
2. **created**: データが使える（API呼び出しここで！）
3. **beforeMount**: DOM作成準備中
4. **mounted**: 画面表示完了（DOM操作ここで！）
5. **beforeUpdate**: データ変更、画面更新前
6. **updated**: 画面更新完了
7. **beforeUnmount**: 削除準備中（クリーンアップここで！）
8. **unmounted**: 削除完了

### 覚えるべき重要なポイント

- **API呼び出し** → `created`
- **DOM操作** → `mounted`  
- **クリーンアップ** → `beforeUnmount`

この3つを覚えておけば、大部分の開発で困ることはありません！
