# 【新人エンジニア向け】Django + Vue.js + MySQL パラメーター処理完全ガイド

## 1. パラメーターとは？基本概念

### パラメーターの種類

**パラメーター**とは、プログラム間でデータをやり取りするための「引数」のようなものです。

```
フロントエンド（Vue.js） → バックエンド（Django） → データベース（MySQL）
        ↓                      ↓                    ↓
    ユーザー入力           APIリクエスト処理        データ検索・更新
```

### 主なパラメーター の種類

1. **URLパラメーター**: `/users/123` の `123`
2. **クエリパラメーター**: `/users?age=25&city=tokyo` の `age=25&city=tokyo`
3. **リクエストボディ**: POST時に送信するJSONデータ
4. **ヘッダーパラメーター**: 認証トークンなど

## 2. Django側：パラメーター受け取りの基礎

### ステップ1: URLパラメーターの処理

#### URL設定（urls.py）

```python
# myapp/urls.py

from django.urls import path
from . import views

urlpatterns = [
    # URLパラメーターを受け取るパターン
    # <int:user_id> で整数のパラメーターを定義
    path('users/<int:user_id>/', views.get_user_detail, name='user_detail'),
    
    # 複数のパラメーターを受け取る
    # <str:category> で文字列パラメーター
    # <int:page> で整数パラメーター
    path('products/<str:category>/<int:page>/', views.get_products, name='products'),
    
    # クエリパラメーターのみの場合（URLパラメーターなし）
    path('search/', views.search_users, name='search_users'),
]
```

#### ビュー関数での受け取り（views.py）

```python
# myapp/views.py

from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.db import connection
import json

def get_user_detail(request, user_id):
    """
    URLパラメーターを受け取る関数
    
    Args:
        request: HTTPリクエストオブジェクト
        user_id: URLから受け取ったユーザーID（整数）
    """
    
    # HTTPメソッドをチェック
    if request.method == 'GET':
        try:
            # データベース接続を取得
            with connection.cursor() as cursor:
                # SQLクエリ実行（パラメーター化クエリ使用）
                # %s はプレースホルダー（SQLインジェクション対策）
                sql = "SELECT id, name, email, age FROM users WHERE id = %s"
                cursor.execute(sql, [user_id])  # user_idを配列で渡す
                
                # 結果を取得
                row = cursor.fetchone()
                
                # データが見つからない場合
                if not row:
                    return JsonResponse({
                        'error': 'ユーザーが見つかりません',
                        'user_id': user_id
                    }, status=404)
                
                # カラム名を取得
                columns = [desc[0] for desc in cursor.description]
                
                # 結果を辞書形式に変換
                user_data = dict(zip(columns, row))
                
                # 成功レスポンスを返す
                return JsonResponse({
                    'success': True,
                    'user': user_data
                })
                
        except Exception as e:
            # エラーハンドリング
            return JsonResponse({
                'error': f'データベースエラー: {str(e)}'
            }, status=500)
    
    # GET以外のメソッドの場合
    return JsonResponse({
        'error': 'GET メソッドのみ対応しています'
    }, status=405)

def get_products(request, category, page):
    """
    複数のURLパラメーターを受け取る関数
    
    Args:
        category: 商品カテゴリー（文字列）
        page: ページ番号（整数）
    """
    
    # ページネーションの設定
    # 1ページあたりの表示件数
    items_per_page = 10
    
    # オフセットを計算（何件目から取得するか）
    # 例：2ページ目なら (2-1) * 10 = 10件目から
    offset = (page - 1) * items_per_page
    
    try:
        with connection.cursor() as cursor:
            # 商品データを取得するSQL
            # LIMIT で件数制限、OFFSET で開始位置指定
            sql = """
                SELECT id, name, price, description 
                FROM products 
                WHERE category = %s 
                ORDER BY created_at DESC 
                LIMIT %s OFFSET %s
            """
            
            # パラメーターを順番に配列で渡す
            cursor.execute(sql, [category, items_per_page, offset])
            
            # 全ての結果を取得
            rows = cursor.fetchall()
            
            # カラム名を取得
            columns = [desc[0] for desc in cursor.description]
            
            # 結果を辞書のリストに変換
            products = []
            for row in rows:
                # 各行を辞書に変換してリストに追加
                product = dict(zip(columns, row))
                products.append(product)
            
            # 全件数を取得（ページネーション情報用）
            count_sql = "SELECT COUNT(*) FROM products WHERE category = %s"
            cursor.execute(count_sql, [category])
            total_count = cursor.fetchone()[0]  # COUNT結果の最初の値
            
            # 総ページ数を計算
            # 例：103件、10件/ページ なら 11ページ
            total_pages = (total_count + items_per_page - 1) // items_per_page
            
            return JsonResponse({
                'success': True,
                'products': products,
                'pagination': {
                    'current_page': page,
                    'total_pages': total_pages,
                    'total_count': total_count,
                    'items_per_page': items_per_page
                }
            })
            
    except Exception as e:
        return JsonResponse({
            'error': f'エラー: {str(e)}'
        }, status=500)
```

### ステップ2: クエリパラメーターの処理

```python
# myapp/views.py（続き）

def search_users(request):
    """
    クエリパラメーターを受け取る検索機能
    
    URL例: /search/?name=田中&age_min=20&age_max=30&city=東京
    """
    
    if request.method == 'GET':
        # クエリパラメーターを取得
        # request.GET.get() で安全に取得（存在しない場合はNone）
        name = request.GET.get('name')           # 名前での検索
        age_min = request.GET.get('age_min')     # 最小年齢
        age_max = request.GET.get('age_max')     # 最大年齢
        city = request.GET.get('city')           # 都市名
        page = request.GET.get('page', '1')      # ページ番号（デフォルト1）
        
        # ページ番号を整数に変換
        try:
            page = int(page)
            # ページ番号が1未満の場合は1に設定
            if page < 1:
                page = 1
        except ValueError:
            # 数値に変換できない場合は1に設定
            page = 1
        
        # 動的なSQL構築用のリスト
        conditions = []  # WHERE条件を格納
        params = []      # SQLパラメーターを格納
        
        # 名前での検索条件を追加
        if name:
            # LIKE演算子で部分一致検索
            # %name% で前後に文字があってもマッチ
            conditions.append("name LIKE %s")
            params.append(f'%{name}%')
        
        # 年齢の下限条件
        if age_min:
            try:
                age_min = int(age_min)
                conditions.append("age >= %s")
                params.append(age_min)
            except ValueError:
                # 数値でない場合は無視
                pass
        
        # 年齢の上限条件
        if age_max:
            try:
                age_max = int(age_max)
                conditions.append("age <= %s")
                params.append(age_max)
            except ValueError:
                pass
        
        # 都市名での検索
        if city:
            conditions.append("city = %s")
            params.append(city)
        
        try:
            with connection.cursor() as cursor:
                # 基本のSELECT文
                base_sql = "SELECT id, name, email, age, city FROM users"
                
                # WHERE条件がある場合は追加
                if conditions:
                    # 条件をANDで結合
                    where_clause = " AND ".join(conditions)
                    sql = f"{base_sql} WHERE {where_clause}"
                else:
                    sql = base_sql
                
                # ORDER BY と LIMIT を追加
                sql += " ORDER BY created_at DESC LIMIT %s OFFSET %s"
                
                # ページネーション用のパラメーターを追加
                items_per_page = 20
                offset = (page - 1) * items_per_page
                params.extend([items_per_page, offset])
                
                # SQLを実行
                cursor.execute(sql, params)
                rows = cursor.fetchall()
                
                # カラム名を取得
                columns = [desc[0] for desc in cursor.description]
                
                # 結果を辞書のリストに変換
                users = []
                for row in rows:
                    user = dict(zip(columns, row))
                    users.append(user)
                
                # 検索結果の総件数を取得
                count_sql = "SELECT COUNT(*) FROM users"
                count_params = []
                
                if conditions:
                    where_clause = " AND ".join(conditions)
                    count_sql += f" WHERE {where_clause}"
                    # LIMIT/OFFSET以外のパラメーターを使用
                    count_params = params[:-2]
                
                cursor.execute(count_sql, count_params)
                total_count = cursor.fetchone()[0]
                
                return JsonResponse({
                    'success': True,
                    'users': users,
                    'search_params': {
                        'name': name,
                        'age_min': age_min,
                        'age_max': age_max,
                        'city': city
                    },
                    'pagination': {
                        'current_page': page,
                        'total_count': total_count,
                        'items_per_page': items_per_page
                    }
                })
                
        except Exception as e:
            return JsonResponse({
                'error': f'検索エラー: {str(e)}'
            }, status=500)
    
    return JsonResponse({
        'error': 'GET メソッドのみ対応'
    }, status=405)
```

### ステップ3: POST データ（リクエストボディ）の処理

```python
# myapp/views.py（続き）

@csrf_exempt  # 開発用（本番ではCSRF対策を適切に実装）
def create_user(request):
    """
    POSTリクエストでユーザーを作成
    
    リクエストボディ例:
    {
        "name": "田中太郎",
        "email": "tanaka@example.com",
        "age": 25,
        "city": "東京"
    }
    """
    
    if request.method == 'POST':
        try:
            # リクエストボディからJSONデータを取得
            # request.bodyは bytes 型なので decode() で文字列に変換
            json_data = json.loads(request.body.decode('utf-8'))
            
            # 必須フィールドの取得と検証
            name = json_data.get('name')
            email = json_data.get('email')
            age = json_data.get('age')
            city = json_data.get('city')
            
            # バリデーション：必須フィールドのチェック
            errors = []
            
            if not name or not name.strip():
                errors.append('名前は必須です')
            elif len(name.strip()) > 100:
                errors.append('名前は100文字以内で入力してください')
            
            if not email or not email.strip():
                errors.append('メールアドレスは必須です')
            elif '@' not in email:
                errors.append('有効なメールアドレスを入力してください')
            
            if age is None:
                errors.append('年齢は必須です')
            elif not isinstance(age, int) or age < 0 or age > 150:
                errors.append('年齢は0-150の整数で入力してください')
            
            # バリデーションエラーがある場合
            if errors:
                return JsonResponse({
                    'success': False,
                    'errors': errors
                }, status=400)
            
            # データベースに挿入
            with connection.cursor() as cursor:
                # 重複チェック：同じメールアドレスが存在するか
                check_sql = "SELECT COUNT(*) FROM users WHERE email = %s"
                cursor.execute(check_sql, [email])
                count = cursor.fetchone()[0]
                
                if count > 0:
                    return JsonResponse({
                        'success': False,
                        'error': 'このメールアドレスは既に使用されています'
                    }, status=400)
                
                # 新しいユーザーを挿入
                insert_sql = """
                    INSERT INTO users (name, email, age, city, created_at) 
                    VALUES (%s, %s, %s, %s, NOW())
                """
                cursor.execute(insert_sql, [name.strip(), email.strip(), age, city])
                
                # 挿入したレコードのIDを取得
                user_id = cursor.lastrowid
                
                # 挿入したデータを取得して返す
                select_sql = "SELECT id, name, email, age, city, created_at FROM users WHERE id = %s"
                cursor.execute(select_sql, [user_id])
                row = cursor.fetchone()
                
                columns = [desc[0] for desc in cursor.description]
                user_data = dict(zip(columns, row))
                
                # 日時を文字列に変換（JSON化のため）
                if user_data.get('created_at'):
                    user_data['created_at'] = user_data['created_at'].isoformat()
                
                return JsonResponse({
                    'success': True,
                    'message': 'ユーザーが正常に作成されました',
                    'user': user_data
                }, status=201)
                
        except json.JSONDecodeError:
            # JSON形式が不正な場合
            return JsonResponse({
                'success': False,
                'error': '不正なJSON形式です'
            }, status=400)
            
        except Exception as e:
            return JsonResponse({
                'success': False,
                'error': f'サーバーエラー: {str(e)}'
            }, status=500)
    
    return JsonResponse({
        'error': 'POST メソッドのみ対応'
    }, status=405)

@csrf_exempt
def update_user(request, user_id):
    """
    PUT/PATCHリクエストでユーザー情報を更新
    
    URL: /users/123/
    リクエストボディで更新したいフィールドのみ送信
    """
    
    if request.method in ['PUT', 'PATCH']:
        try:
            # JSONデータを取得
            json_data = json.loads(request.body.decode('utf-8'))
            
            # 更新可能なフィールドのリスト
            allowed_fields = ['name', 'email', 'age', 'city']
            
            # 更新用のSQL構築
            update_fields = []  # SET句用
            params = []         # パラメーター用
            
            # 送信されたフィールドをチェック
            for field in allowed_fields:
                if field in json_data:
                    value = json_data[field]
                    
                    # フィールド別のバリデーション
                    if field == 'name':
                        if not value or not value.strip():
                            return JsonResponse({
                                'error': '名前は空にできません'
                            }, status=400)
                        value = value.strip()
                    
                    elif field == 'email':
                        if not value or '@' not in value:
                            return JsonResponse({
                                'error': '有効なメールアドレスを入力してください'
                            }, status=400)
                        value = value.strip()
                    
                    elif field == 'age':
                        if not isinstance(value, int) or value < 0 or value > 150:
                            return JsonResponse({
                                'error': '年齢は0-150の整数で入力してください'
                            }, status=400)
                    
                    # 更新リストに追加
                    update_fields.append(f"{field} = %s")
                    params.append(value)
            
            # 更新するフィールドがない場合
            if not update_fields:
                return JsonResponse({
                    'error': '更新するフィールドがありません'
                }, status=400)
            
            # user_idをパラメーターに追加（WHERE句用）
            params.append(user_id)
            
            with connection.cursor() as cursor:
                # ユーザー存在チェック
                check_sql = "SELECT COUNT(*) FROM users WHERE id = %s"
                cursor.execute(check_sql, [user_id])
                if cursor.fetchone()[0] == 0:
                    return JsonResponse({
                        'error': 'ユーザーが見つかりません'
                    }, status=404)
                
                # 更新SQL実行
                update_sql = f"""
                    UPDATE users 
                    SET {', '.join(update_fields)}, updated_at = NOW() 
                    WHERE id = %s
                """
                cursor.execute(update_sql, params)
                
                # 更新されたデータを取得
                select_sql = "SELECT id, name, email, age, city, created_at, updated_at FROM users WHERE id = %s"
                cursor.execute(select_sql, [user_id])
                row = cursor.fetchone()
                
                columns = [desc[0] for desc in cursor.description]
                user_data = dict(zip(columns, row))
                
                # 日時を文字列に変換
                for field in ['created_at', 'updated_at']:
                    if user_data.get(field):
                        user_data[field] = user_data[field].isoformat()
                
                return JsonResponse({
                    'success': True,
                    'message': 'ユーザー情報が更新されました',
                    'user': user_data
                })
                
        except json.JSONDecodeError:
            return JsonResponse({
                'error': '不正なJSON形式です'
            }, status=400)
            
        except Exception as e:
            return JsonResponse({
                'error': f'更新エラー: {str(e)}'
            }, status=500)
    
    return JsonResponse({
        'error': 'PUT または PATCH メソッドのみ対応'
    }, status=405)
```

## 3. Vue.js側：パラメーター送信の基礎

### ステップ1: axios のセットアップ

```javascript
// main.js または 別のセットアップファイル

import { createApp } from 'vue'
import axios from 'axios'
import App from './App.vue'

// axiosの基本設定
axios.defaults.baseURL = 'http://localhost:8000'  // DjangoサーバーのURL
axios.defaults.headers.common['Content-Type'] = 'application/json'

// CSRF対策（Djangoとの連携時）
axios.defaults.xsrfHeaderName = 'X-CSRFToken'
axios.defaults.xsrfCookieName = 'csrftoken'

const app = createApp(App)

// axiosをグローバルに使用可能にする
app.config.globalProperties.$axios = axios

app.mount('#app')
```

### ステップ2: ユーザー詳細取得コンポーネント

```vue
<template>
  <div class="user-detail">
    <h2>ユーザー詳細</h2>
    
    <!-- ユーザーID入力フィールド -->
    <div class="input-group">
      <label for="userId">ユーザーID:</label>
      <input 
        id="userId"
        v-model="userId" 
        type="number" 
        min="1"
        placeholder="ユーザーIDを入力"
      />
      <button @click="fetchUser" :disabled="loading">
        {{ loading ? '取得中...' : 'ユーザー取得' }}
      </button>
    </div>
    
    <!-- ローディング表示 -->
    <div v-if="loading" class="loading">
      データを取得中...
    </div>
    
    <!-- エラー表示 -->
    <div v-if="error" class="error">
      {{ error }}
    </div>
    
    <!-- ユーザー情報表示 -->
    <div v-if="user" class="user-info">
      <h3>{{ user.name }}</h3>
      <p><strong>ID:</strong> {{ user.id }}</p>
      <p><strong>メール:</strong> {{ user.email }}</p>
      <p><strong>年齢:</strong> {{ user.age }}歳</p>
      <p><strong>都市:</strong> {{ user.city }}</p>
    </div>
  </div>
</template>

<script>
import axios from 'axios'

export default {
  name: 'UserDetail',
  
  data() {
    return {
      // ユーザーIDの入力値
      userId: null,
      
      // 取得したユーザー情報
      user: null,
      
      // ローディング状態
      loading: false,
      
      // エラーメッセージ
      error: null
    }
  },
  
  methods: {
    async fetchUser() {
      // 入力チェック
      if (!this.userId || this.userId < 1) {
        this.error = '有効なユーザーIDを入力してください'
        return
      }
      
      // 状態をリセット
      this.user = null
      this.error = null
      this.loading = true
      
      try {
        // DjangoのAPIエンドポイントにGETリクエスト
        // URLパラメーターとしてuser_idを送信
        const response = await axios.get(`/api/users/${this.userId}/`)
        
        // レスポンスの確認
        console.log('API レスポンス:', response.data)
        
        // 成功した場合
        if (response.data.success) {
          // ユーザー情報を設定
          this.user = response.data.user
        } else {
          // APIからエラーレスポンスが返された場合
          this.error = response.data.error || '不明なエラーが発生しました'
        }
        
      } catch (apiError) {
        // HTTPエラーまたはネットワークエラー
        console.error('API エラー:', apiError)
        
        if (apiError.response) {
          // サーバーからエラーレスポンスが返された場合
          const status = apiError.response.status
          const errorData = apiError.response.data
          
          if (status === 404) {
            this.error = 'ユーザーが見つかりません'
          } else if (status >= 500) {
            this.error = 'サーバーエラーが発生しました'
          } else {
            this.error = errorData.error || `エラー（ステータス: ${status}）`
          }
        } else {
          // ネットワークエラーなど
          this.error = 'ネットワークエラーが発生しました'
        }
      } finally {
        // 必ず実行される処理
        this.loading = false
      }
    }
  }
}
</script>

<style scoped>
.user-detail {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
}

.input-group {
  margin-bottom: 20px;
  display: flex;
  align-items: center;
  gap: 10px;
}

.input-group label {
  font-weight: bold;
  min-width: 100px;
}

.input-group input {
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  flex: 1;
}

.input-group button {
  padding: 8px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.input-group button:disabled {
  background-color: #6c757d;
  cursor: not-allowed;
}

.loading {
  text-align: center;
  color: #007bff;
  font-style: italic;
}

.error {
  background-color: #f8d7da;
  color: #721c24;
  padding: 10px;
  border-radius: 4px;
  margin: 10px 0;
}

.user-info {
  background-color: #d4edda;
  color: #155724;
  padding: 15px;
  border-radius: 4px;
  margin-top: 15px;
}

.user-info h3 {
  margin-top: 0;
  color: #0c5460;
}

.user-info p {
  margin: 5px 0;
}
</style>
```

### ステップ3: 検索機能コンポーネント

```vue
<template>
  <div class="user-search">
    <h2>ユーザー検索</h2>
    
    <!-- 検索フォーム -->
    <form @submit.prevent="searchUsers" class="search-form">
      <div class="form-row">
        <div class="form-group">
          <label for="searchName">名前:</label>
          <input 
            id="searchName"
            v-model="searchParams.name" 
            type="text" 
            placeholder="部分一致で検索"
          />
        </div>
        
        <div class="form-group">
          <label for="searchCity">都市:</label>
          <select id="searchCity" v-model="searchParams.city">
            <option value="">すべて</option>
            <option value="東京">東京</option>
            <option value="大阪">大阪</option>
            <option value="名古屋">名古屋</option>
            <option value="福岡">福岡</option>
          </select>
        </div>
      </div>
      
      <div class="form-row">
        <div class="form-group">
          <label for="ageMin">年齢:</label>
          <input 
            id="ageMin"
            v-model.number="searchParams.age_min" 
            type="number" 
            min="0" 
            max="150"
            placeholder="最小"
          />
          <span>〜</span>
          <input 
            v-model.number="searchParams.age_max" 
            type="number" 
            min="0" 
            max="150"
            placeholder="最大"
          />
        </div>
        
        <div class="form-group">
          <button type="submit" :disabled="loading">
            {{ loading ? '検索中...' : '検索' }}
          </button>
          <button type="button" @click="clearSearch">
            クリア
          </button>
        </div>
      </div>
    </form>
    
    <!-- 検索結果 -->
    <div v-if="error" class="error">
      {{ error }}
    </div>
    
    <div v-if="searchResult" class="search-results">
      <h3>
        検索結果: {{ searchResult.pagination.total_count }}件
        （{{ searchResult.pagination.current_page }}ページ目）
      </h3>
      
      <!-- ユーザー一覧 -->
      <div v-if="searchResult.users.length > 0" class="user-list">
        <div 
          v-for="user in searchResult.users" 
          :key="user.id" 
          class="user-card"
        >
          <h4>{{ user.name }}</h4>
          <p>{{ user.email }}</p>
          <p>{{ user.age }}歳 - {{ user.city }}</p>
        </div>
      </div>
      
      <div v-else class="no-results">
        検索条件に一致するユーザーが見つかりませんでした。
      </div>
      
      <!-- ページネーション -->
      <div v-if="searchResult.pagination.total_count > 0" class="pagination">
        <button 
          @click="changePage(currentPage - 1)"
          :disabled="currentPage <= 1"
        >
          前のページ
        </button>
        
        <span class="page-info">
          {{ currentPage }} / {{ Math.ceil(searchResult.pagination.total_count / 20) }}
        </span>
        
        <button 
          @click="changePage(currentPage + 1)"
          :disabled="currentPage >= Math.ceil(searchResult.pagination.total_count / 20)"
        >
          次のページ
        </button>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios'

export default {
  name: 'UserSearch',
  
  data() {
    return {
      // 検索パラメーター
      searchParams: {
        name: '',
        city: '',
        age_min: null,
        age_max: null
      },
      
      // 現在のページ番号
      currentPage: 1,
      
      // 検索結果
      searchResult: null,
      
      // ローディング状態
      loading: false,
      
      // エラーメッセージ
      error: null
    }
  },
  
  methods: {
    async searchUsers(page = 1) {
      // ページ番号を設定
      this.currentPage = page
      
      // 状態をリセット
      this.error = null
      this.loading = true
      
      try {
        // クエリパラメーターを構築
        const params = new URLSearchParams()
        
        // 各検索条件をチェックしてパラメーターに追加
        if (this.searchParams.name && this.searchParams.name.trim()) {
          params.append('name', this.searchParams.name.trim())
        }
        
        if (this.searchParams.city) {
          params.append('city', this.searchParams.city)
        }
        
        if (this.searchParams.age_min !== null && this.searchParams.age_min !== '') {
          params.append('age_min', this.searchParams.age_min)
        }
        
        if (this.searchParams.age_max !== null && this.searchParams.age_max !== '') {
          params.append('age_max', this.searchParams.age_max)
        }
        
        // ページ番号を追加
        params.append('page', page)
        
        // クエリパラメーター付きでAPIリクエスト
        const queryString = params.toString()
        const url = `/api/search/${queryString ? '?' + queryString : ''}`
        
        console.log('検索URL:', url)
        
        const response = await axios.get(url)
        
        // 成功した場合
        if (response.data.success) {
          this.searchResult = response.data
        } else {
          this.error = response.data.error || '検索に失敗しました'
        }
        
      } catch (apiError) {
        console.error('検索エラー:', apiError)
        
        if (apiError.response) {
          const errorData = apiError.response.data
          this.error = errorData.error || 'サーバーエラーが発生しました'
        } else {
          this.error = 'ネットワークエラーが発生しました'
        }
      } finally {
        this.loading = false
      }
    },
    
    // ページ変更
    changePage(newPage) {
      if (newPage >= 1) {
        this.searchUsers(newPage)
      }
    },
    
    // 検索条件をクリア
    clearSearch() {
      // 検索パラメーターをリセット
      this.searchParams = {
        name: '',
        city: '',
        age_min: null,
        age_max: null
      }
      
      // 検索結果もクリア
      this.searchResult = null
      this.currentPage = 1
      this.error = null
    }
  }
}
</script>

<style scoped>
.user-search {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
}

.search-form {
  background-color: #f8f9fa;
  padding: 20px;
  border-radius: 8px;
  margin-bottom: 20px;
}

.form-row {
  display: flex;
  gap: 20px;
  margin-bottom: 15px;
  align-items: end;
}

.form-group {
  display: flex;
  flex-direction: column;
  flex: 1;
}

.form-group label {
  font-weight: bold;
  margin-bottom: 5px;
}

.form-group input,
.form-group select {
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.form-group button {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 10px;
}

.form-group button[type="submit"] {
  background-color: #007bff;
  color: white;
}

.form-group button[type="button"] {
  background-color: #6c757d;
  color: white;
}

.error {
  background-color: #f8d7da;
  color: #721c24;
  padding: 15px;
  border-radius: 4px;
  margin: 15px 0;
}

.search-results h3 {
  color: #495057;
  border-bottom: 2px solid #dee2e6;
  padding-bottom: 10px;
}

.user-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 15px;
  margin: 20px 0;
}

.user-card {
  background-color: #ffffff;
  border: 1px solid #dee2e6;
  border-radius: 8px;
  padding: 15px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.user-card h4 {
  margin: 0 0 10px 0;
  color: #495057;
}

.user-card p {
  margin: 5px 0;
  color: #6c757d;
}

.no-results {
  text-align: center;
  color: #6c757d;
  font-style: italic;
  padding: 40px;
}

.pagination {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 15px;
  margin-top: 30px;
}

.pagination button {
  padding: 8px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.pagination button:disabled {
  background-color: #6c757d;
  cursor: not-allowed;
}

.page-info {
  font-weight: bold;
  color: #495057;
}
</style>
```

### ステップ4: ユーザー作成・更新コンポーネント

```vue
<template>
  <div class="user-form">
    <h2>{{ isEdit ? 'ユーザー編集' : 'ユーザー作成' }}</h2>
    
    <!-- 編集モードの場合、ユーザーID入力フィールド -->
    <div v-if="!isEdit" class="mode-selector">
      <label>
        <input type="radio" v-model="mode" value="create" />
        新規作成
      </label>
      <label>
        <input type="radio" v-model="mode" value="edit" />
        編集
      </label>
    </div>
    
    <!-- 編集モード用のユーザーID入力 -->
    <div v-if="mode === 'edit' && !loadedUser" class="user-id-input">
      <label for="editUserId">編集するユーザーID:</label>
      <input 
        id="editUserId"
        v-model="editUserId" 
        type="number" 
        min="1"
        placeholder="ユーザーIDを入力"
      />
      <button @click="loadUser" :disabled="loading">
        {{ loading ? '読み込み中...' : 'ユーザー読み込み' }}
      </button>
    </div>
    
    <!-- フォーム -->
    <form v-if="mode === 'create' || loadedUser" @submit.prevent="submitForm" class="user-form-content">
      <div class="form-group">
        <label for="userName">名前 <span class="required">*</span></label>
        <input 
          id="userName"
          v-model="formData.name" 
          type="text" 
          required
          maxlength="100"
          placeholder="山田太郎"
        />
        <div v-if="errors.name" class="field-error">{{ errors.name }}</div>
      </div>
      
      <div class="form-group">
        <label for="userEmail">メールアドレス <span class="required">*</span></label>
        <input 
          id="userEmail"
          v-model="formData.email" 
          type="email" 
          required
          placeholder="yamada@example.com"
        />
        <div v-if="errors.email" class="field-error">{{ errors.email }}</div>
      </div>
      
      <div class="form-group">
        <label for="userAge">年齢 <span class="required">*</span></label>
        <input 
          id="userAge"
          v-model.number="formData.age" 
          type="number" 
          min="0" 
          max="150"
          required
          placeholder="25"
        />
        <div v-if="errors.age" class="field-error">{{ errors.age }}</div>
      </div>
      
      <div class="form-group">
        <label for="userCity">都市</label>
        <select id="userCity" v-model="formData.city">
          <option value="">選択してください</option>
          <option value="東京">東京</option>
          <option value="大阪">大阪</option>
          <option value="名古屋">名古屋</option>
          <option value="福岡">福岡</option>
          <option value="その他">その他</option>
        </select>
      </div>
      
      <div class="form-actions">
        <button type="submit" :disabled="loading">
          {{ loading ? '処理中...' : (isEdit ? '更新' : '作成') }}
        </button>
        <button type="button" @click="resetForm">
          リセット
        </button>
        <button v-if="loadedUser" type="button" @click="cancelEdit">
          編集キャンセル
        </button>
      </div>
    </form>
    
    <!-- エラー・成功メッセージ -->
    <div v-if="message" :class="['message', messageType]">
      {{ message }}
    </div>
    
    <!-- 作成・更新結果 -->
    <div v-if="resultUser" class="result">
      <h3>{{ isEdit ? '更新' : '作成' }}完了</h3>
      <div class="user-info">
        <p><strong>ID:</strong> {{ resultUser.id }}</p>
        <p><strong>名前:</strong> {{ resultUser.name }}</p>
        <p><strong>メール:</strong> {{ resultUser.email }}</p>
        <p><strong>年齢:</strong> {{ resultUser.age }}歳</p>
        <p><strong>都市:</strong> {{ resultUser.city }}</p>
        <p v-if="resultUser.created_at">
          <strong>作成日時:</strong> {{ formatDate(resultUser.created_at) }}
        </p>
        <p v-if="resultUser.updated_at">
          <strong>更新日時:</strong> {{ formatDate(resultUser.updated_at) }}
        </p>
      </div>
    </div>
  </div>
</template>

<script>
import axios from 'axios'

export default {
  name: 'UserForm',
  
  data() {
    return {
      // モード（create: 新規作成, edit: 編集）
      mode: 'create',
      
      // 編集対象のユーザーID
      editUserId: null,
      
      // 読み込んだユーザー情報
      loadedUser: null,
      
      // フォームデータ
      formData: {
        name: '',
        email: '',
        age: null,
        city: ''
      },
      
      // バリデーションエラー
      errors: {},
      
      // ローディング状態
      loading: false,
      
      // メッセージ
      message: '',
      messageType: '', // 'success' or 'error'
      
      // 作成・更新結果
      resultUser: null
    }
  },
  
  computed: {
    // 編集モードかどうか
    isEdit() {
      return this.mode === 'edit' && this.loadedUser
    }
  },
  
  watch: {
    // モードが変更された時の処理
    mode(newMode) {
      if (newMode === 'create') {
        this.resetForm()
        this.loadedUser = null
      }
    }
  },
  
  methods: {
    // ユーザー情報を読み込み（編集用）
    async loadUser() {
      if (!this.editUserId || this.editUserId < 1) {
        this.showMessage('有効なユーザーIDを入力してください', 'error')
        return
      }
      
      this.loading = true
      this.clearMessages()
      
      try {
        // ユーザー情報を取得
        const response = await axios.get(`/api/users/${this.editUserId}/`)
        
        if (response.data.success) {
          // 読み込んだユーザー情報をフォームに設定
          this.loadedUser = response.data.user
          this.formData = {
            name: this.loadedUser.name,
            email: this.loadedUser.email,
            age: this.loadedUser.age,
            city: this.loadedUser.city || ''
          }
          
          this.showMessage('ユーザー情報を読み込みました', 'success')
        } else {
          this.showMessage(response.data.error, 'error')
        }
      } catch (error) {
        console.error('ユーザー読み込みエラー:', error)
        
        if (error.response && error.response.status === 404) {
          this.showMessage('ユーザーが見つかりません', 'error')
        } else {
          this.showMessage('ユーザー情報の読み込みに失敗しました', 'error')
        }
      } finally {
        this.loading = false
      }
    },
    
    // フォーム送信
    async submitForm() {
      // バリデーション
      if (!this.validateForm()) {
        return
      }
      
      this.loading = true
      this.clearMessages()
      
      try {
        let response
        
        if (this.isEdit) {
          // 更新処理（PATCH リクエスト）
          response = await axios.patch(`/api/users/${this.loadedUser.id}/`, this.formData)
        } else {
          // 作成処理（POST リクエスト）
          response = await axios.post('/api/users/', this.formData)
        }
        
        if (response.data.success) {
          // 成功した場合
          this.resultUser = response.data.user
          this.showMessage(response.data.message, 'success')
          
          // 新規作成の場合はフォームをリセット
          if (!this.isEdit) {
            this.resetForm()
          }
        } else {
          // APIからエラーレスポンス
          if (response.data.errors) {
            // フィールド別エラー
            this.errors = response.data.errors
          }
          this.showMessage(response.data.error || '処理に失敗しました', 'error')
        }
        
      } catch (error) {
        console.error('送信エラー:', error)
        
        if (error.response) {
          const errorData = error.response.data
          
          if (errorData.errors) {
            // バリデーションエラー
            this.errors = errorData.errors
          }
          
          this.showMessage(errorData.error || 'サーバーエラーが発生しました', 'error')
        } else {
          this.showMessage('ネットワークエラーが発生しました', 'error')
        }
      } finally {
        this.loading = false
      }
    },
    
    // フォームバリデーション
    validateForm() {
      this.errors = {}
      let isValid = true
      
      // 名前の検証
      if (!this.formData.name || !this.formData.name.trim()) {
        this.errors.name = '名前は必須です'
        isValid = false
      } else if (this.formData.name.trim().length > 100) {
        this.errors.name = '名前は100文字以内で入力してください'
        isValid = false
      }
      
      // メールアドレスの検証
      if (!this.formData.email || !this.formData.email.trim()) {
        this.errors.email = 'メールアドレスは必須です'
        isValid = false
      } else {
        // 簡単なメール形式チェック
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/
        if (!emailRegex.test(this.formData.email.trim())) {
          this.errors.email = '有効なメールアドレス形式で入力してください'
          isValid = false
        }
      }
      
      // 年齢の検証
      if (this.formData.age === null || this.formData.age === '') {
        this.errors.age = '年齢は必須です'
        isValid = false
      } else if (this.formData.age < 0 || this.formData.age > 150) {
        this.errors.age = '年齢は0-150の範囲で入力してください'
        isValid = false
      }
      
      return isValid
    },
    
    // フォームリセット
    resetForm() {
      this.formData = {
        name: '',
        email: '',
        age: null,
        city: ''
      }
      this.errors = {}
      this.clearMessages()
      this.resultUser = null
    },
    
    // 編集キャンセル
    cancelEdit() {
      this.mode = 'create'
      this.loadedUser = null
      this.editUserId = null
      this.resetForm()
    },
    
    // メッセージ表示
    showMessage(text, type) {
      this.message = text
      this.messageType = type
      
      // 5秒後にメッセージを自動削除
      setTimeout(() => {
        this.message = ''
        this.messageType = ''
      }, 5000)
    },
    
    // メッセージクリア
    clearMessages() {
      this.message = ''
      this.messageType = ''
    },
    
    // 日時フォーマット
    formatDate(dateString) {
      if (!dateString) return ''
      
      const date = new Date(dateString)
      return date.toLocaleString('ja-JP')
    }
  }
}
</script>

<style scoped>
.user-form {
  max-width: 600px;
  margin: 0 auto;
  padding: 20px;
}

.mode-selector {
  display: flex;
  gap: 20px;
  margin-bottom: 20px;
  padding: 15px;
  background-color: #f8f9fa;
  border-radius: 8px;
}

.mode-selector label {
  display: flex;
  align-items: center;
  gap: 8px;
  cursor: pointer;
}

.user-id-input {
  display: flex;
  align-items: center;
  gap: 10px;
  margin-bottom: 20px;
  padding: 15px;
  background-color: #e3f2fd;
  border-radius: 8px;
}

.user-id-input input {
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
  flex: 1;
}

.user-id-input button {
  padding: 8px 16px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.user-form-content {
  background-color: #ffffff;
  padding: 20px;
  border: 1px solid #dee2e6;
  border-radius: 8px;
}

.form-group {
  margin-bottom: 20px;
}

.form-group label {
  display: block;
  font-weight: bold;
  margin-bottom: 8px;
  color: #495057;
}

.required {
  color: #dc3545;
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 12px;
  border: 1px solid #ced4da;
  border-radius: 6px;
  font-size: 16px;
  transition: border-color 0.15s ease-in-out;
}

.form-group input:focus,
.form-group select:focus {
  outline: none;
  border-color: #007bff;
  box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.field-error {
  color: #dc3545;
  font-size: 14px;
  margin-top: 5px;
}

.form-actions {
  display: flex;
  gap: 15px;
  margin-top: 30px;
}

.form-actions button {
  padding: 12px 24px;
  border: none;
  border-radius: 6px;
  font-size: 16px;
  cursor: pointer;
  transition: background-color 0.15s ease-in-out;
}

.form-actions button[type="submit"] {
  background-color: #007bff;
  color: white;
}

.form-actions button[type="submit"]:hover:not(:disabled) {
  background-color: #0056b3;
}

.form-actions button[type="button"] {
  background-color: #6c757d;
  color: white;
}

.form-actions button:disabled {
  background-color: #6c757d;
  cursor: not-allowed;
  opacity: 0.65;
}

.message {
  padding: 15px;
  border-radius: 6px;
  margin: 20px 0;
  font-weight: 500;
}

.message.success {
  background-color: #d4edda;
  color: #155724;
  border: 1px solid #c3e6cb;
}

.message.error {
  background-color: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
}

.result {
  background-color: #d1ecf1;
  border: 1px solid #bee5eb;
  border-radius: 8px;
  padding: 20px;
  margin-top: 20px;
}

.result h3 {
  color: #0c5460;
  margin-top: 0;
}

.user-info p {
  margin: 8px 0;
  color: #495057;
}
</style>
```

## 4. セキュリティとベストプラクティス

### SQLインジェクション対策

```python
# ❌ 危険な例：文字列結合でSQL構築
def bad_search(request):
    search_term = request.GET.get('q', '')
    
    # SQLインジェクション脆弱性あり
    sql = f"SELECT * FROM users WHERE name = '{search_term}'"
    cursor.execute(sql)  # 危険！

# ✅ 安全な例：パラメーター化クエリ
def safe_search(request):
    search_term = request.GET.get('q', '')
    
    # プレースホルダーを使用
    sql = "SELECT * FROM users WHERE name = %s"
    cursor.execute(sql, [search_term])  # 安全！
```

### 入力値検証とサニタイゼーション

```python
import re
from django.core.validators import validate_email
from django.core.exceptions import ValidationError

def validate_user_input(data):
    """
    ユーザー入力の検証関数
    """
    errors = []
    
    # 名前の検証
    name = data.get('name', '').strip()
    if not name:
        errors.append('名前は必須です')
    elif len(name) > 100:
        errors.append('名前は100文字以内で入力してください')
    elif re.search(r'[<>\"\'&]', name):
        errors.append('名前に使用できない文字が含まれています')
    
    # メールアドレスの検証
    email = data.get('email', '').strip()
    if not email:
        errors.append('メールアドレスは必須です')
    else:
        try:
            validate_email(email)
        except ValidationError:
            errors.append('有効なメールアドレス形式で入力してください')
    
    # 年齢の検証
    age = data.get('age')
    if age is None:
        errors.append('年齢は必須です')
    elif not isinstance(age, int) or age < 0 or age > 150:
        errors.append('年齢は0-150の整数で入力してください')
    
    return errors
```

### CORS設定（Django）

```python
# settings.py

# CORS設定（django-cors-headers使用）
INSTALLED_APPS = [
    # ...
    'corsheaders',
    # ...
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # ...
]

# 開発環境用設定
CORS_ALLOWED_ORIGINS = [
    'http://localhost:3000',  # Vue.js開発サーバー
    'http://127.0.0.1:3000',
]

# 本番環境では厳格に設定
# CORS_ALLOWED_ORIGINS = [
#     'https://yourdomain.com',
# ]
```

### エラーハンドリング

```javascript
// Vue.js側での統一的なエラーハンドリング

// api.js
import axios from 'axios'

// Axiosインスタンスを作成
const apiClient = axios.create({
  baseURL: 'http://localhost:8000/api',
  timeout: 10000,  // 10秒でタイムアウト
  headers: {
    'Content-Type': 'application/json'
  }
})

// レスポンスインターセプター（エラーハンドリング）
apiClient.interceptors.response.use(
  // 成功時の処理
  response => {
    return response
  },
  
  // エラー時の処理
  error => {
    console.error('API エラー:', error)
    
    // エラーの種類に応じて適切なメッセージを設定
    let errorMessage = 'エラーが発生しました'
    
    if (error.response) {
      // サーバーからエラーレスポンスが返された場合
      const status = error.response.status
      const data = error.response.data
      
      switch (status) {
        case 400:
          errorMessage = data.error || 'リクエストが不正です'
          break
        case 401:
          errorMessage = '認証が必要です'
          break
        case 403:
          errorMessage = 'アクセス権限がありません'
          break
        case 404:
          errorMessage = 'データが見つかりません'
          break
        case 500:
          errorMessage = 'サーバーエラーが発生しました'
          break
        default:
          errorMessage = data.error || `エラー（ステータス: ${status}）`
      }
    } else if (error.request) {
      // ネットワークエラー
      errorMessage = 'ネットワークエラーが発生しました'
    }
    
    // エラーオブジェクトにメッセージを追加
    error.userMessage = errorMessage
    
    return Promise.reject(error)
  }
)

export default apiClient
```

## まとめ

### 重要なポイント

1. **Django側**
   - URLパラメーター: `path('users/<int:user_id>/', view)`
   - クエリパラメーター: `request.GET.get('param')`
   - POSTデータ: `json.loads(request.body)`
   - **必ずパラメーター化クエリを使用**（SQLインジェクション対策）

2. **Vue.js側**
   - URLパラメーター: `axios.get(`/api/users/${id}/`)`
   - クエリパラメーター: `axios.get('/api/search/?name=value')`
   - POSTデータ: `axios.post('/api/users/', data)`

3. **セキュリティ**
   - 入力値検証
   - SQLインジェクション対策
   - CORS設定
   - エラーハンドリング

これらの基本を理解すれば、Django + Vue.js + MySQLでの安全で効率的なWebアプリケーション開発ができるようになります！
